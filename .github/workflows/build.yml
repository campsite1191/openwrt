name: Build OpenWrt for Specific Target and Release

on:
  workflow_dispatch: # Manual trigger
  schedule: # Scheduled daily trigger at 12 AM Pacific Time (8 AM UTC)
    - cron: "1 0 * * *"

concurrency:
  group: build-openwrt-${{ github.ref }}
  cancel-in-progress: false

env:
  REMOTE_REPOSITORY: qosmio/openwrt-ipq
  REMOTE_BRANCH: main-nss
  CUSTOM_FILES_PATH: files/
  NSS_PACKAGES_REPOSITORY: qosmio/nss-packages
  NSS_PACKAGES_REPOSITORY_BRANCH: NSS-12.5-K6.x

jobs:
  check_commits:
    name: Check for New Commits
    runs-on: ubuntu-latest
    outputs:
      new_commits: ${{ steps.check_new_commits.outputs.new_commits }}
      latest_commit_sha: ${{ steps.check_new_commits.outputs.latest_commit_sha }}
      nss_packages_repo_new_commits: ${{ steps.check_nss_packages_repo_new_commits.outputs.new_commits }}
      nss_packages_repo_latest_commit_sha: ${{ steps.check_nss_packages_repo_new_commits.outputs.latest_commit_sha }}
    steps:
      - name: Check for New Commits in Remote Repository
        id: check_new_commits
        run: |
          latest_commit_sha=$(curl -sL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ env.REMOTE_REPOSITORY }}/commits?sha=${{ env.REMOTE_BRANCH }}&per_page=1" | jq -r '.[0].sha')
          last_built_commit_sha=$(curl -sL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.body' | grep -oP 'Build Commit: \K\w+' || echo '')
          echo "new_commits=$([[ "$latest_commit_sha" != "$last_built_commit_sha" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "latest_commit_sha=$latest_commit_sha" >> $GITHUB_OUTPUT

          # Debugging
          echo "Latest Commit SHA: $latest_commit_sha"
          echo "Last Built Commit SHA: $last_built_commit_sha"

      - name: Check for New Commits in NSS Packages Repository
        id: check_nss_packages_repo_new_commits
        run: |
          nss_packages_repo_latest_commit_sha=$(curl -sL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ env.NSS_PACKAGES_REPOSITORY }}/commits?sha=${{ env.NSS_PACKAGES_REPOSITORY_BRANCH }}&per_page=1" | jq -r '.[0].sha')
          nss_packages_repo_last_built_commit_sha=$(curl -sL -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.body' | grep -oP 'NSS Packages Commit: \K\w+' || echo '')
          echo "new_commits=$([[ "$nss_packages_repo_latest_commit_sha" != "$nss_packages_repo_last_built_commit_sha" ]] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "latest_commit_sha=$nss_packages_repo_latest_commit_sha" >> $GITHUB_OUTPUT
          
          # Debugging
          echo "Latest Commit SHA: $nss_packages_repo_latest_commit_sha"
          echo "Last Built Commit SHA: $nss_packages_repo_last_built_commit_sha"

  build:
    name: Build OpenWrt Firmware
    needs: check_commits
    if: needs.check_commits.outputs.new_commits == 'true' || needs.check_commits.outputs.nss_packages_repo_new_commits == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Install Build Dependencies
        run: |
          sudo apt update 
          # && sudo apt upgrade -y
          sudo apt install -y build-essential clang flex bison g++ gawk gcc-multilib g++-multilib gettext git libncurses5-dev libssl-dev python3-setuptools rsync swig unzip zlib1g-dev file wget mold ccache tree
          # npm

      - name: Checkout Remote Repository
        uses: actions/checkout@master
        with:
          fetch-depth: 1
          repository: ${{ env.REMOTE_REPOSITORY }}
          ref: ${{ env.REMOTE_BRANCH }}

      - name: Apply Temporary Patch
        run: |
          curl -sL -o - https://patch-diff.githubusercontent.com/raw/openwrt/openwrt/pull/19071.patch | git apply -

      - name: Checkout Current Repository
        uses: actions/checkout@master
        with:
          fetch-depth: 1
          path: "custom_repo"

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          check-latest: true

      # - name: Setup ccache
      #   uses: hendrikmuhs/ccache-action@v1.2
      #   with:
      #     max-size: 2G
      #     key: ${{ runner.os }}-openwrt-ccache

      # - name: Cache Toolchain
      #   uses: actions/cache@v4
      #   with:
      #     path: | 
      #       dl
      #     key: ${{ runner.os }}-openwrt-toolchain
      #     restore-keys: |
      #       ${{ runner.os }}-openwrt-toolchain

      - name: Update and Install Feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Update Feeds Again
        run: |
          ./scripts/feeds update -a

      - name: Add AmneziaWG Packages
        run: |
          echo "Cloning and adding AmneziaWG packages"
          # Clone the AmneziaWG package repository
          git clone https://github.com/this-username-has-been-taken/amneziawg-openwrt.git package/amneziawg-openwrt
          rm -rf package/amneziawg-openwrt/Makefile
          sed -i 's#../../packages/lang/golang/golang-package.mk#../../../feeds/packages/lang/golang/golang-package.mk#g' package/amneziawg-openwrt/amneziawg-go/Makefile
          cat package/amneziawg-openwrt/amneziawg-go/Makefile

      - name: Update and Add SmartDNS Package
        run: |
          echo "Fetching the latest SmartDNS commit hash"
          LATEST_COMMIT=$(git ls-remote https://github.com/pymumu/smartdns.git refs/heads/master | cut -f1)
          [ -z "$LATEST_COMMIT" ] && { echo "Failed to fetch commit hash"; exit 1; }
          curl -fsSL https://raw.githubusercontent.com/pymumu/smartdns/master/package/openwrt/Makefile -o feeds/packages/net/smartdns/Makefile
          sed -i -E "s/^(PKG_SOURCE_VERSION:=).*/\1$LATEST_COMMIT/" feeds/packages/net/smartdns/Makefile
          cat feeds/packages/net/smartdns/Makefile

      - name: Update and Add SmartDNS Web UI Package
        run: |
          echo "Fetching the latest SmartDNS Web UI commit hash"
          LATEST_COMMIT=$(git ls-remote https://github.com/pymumu/smartdns-webui.git refs/heads/main | cut -f1)
          [ -z "$LATEST_COMMIT" ] && { echo "Failed to fetch commit hash"; exit 1; }
          sed -i -E "s/^(SMARTDNS_WEBUI_SOURCE_VERSION:=).*/\1$LATEST_COMMIT/" feeds/packages/net/smartdns/Makefile
          cat feeds/packages/net/smartdns/Makefile

      - name: Update SmartDNS LuCI File
        run: |
          REPO_NAME="luci-app-smartdns"
          TARGET_DIR="$(pwd)/feeds/luci/applications/${REPO_NAME}"
          DOWNLOAD_URL="https://github.com/pymumu/${REPO_NAME}/archive/master.tar.gz"
          
          rm -rf "${TARGET_DIR}"
          mkdir -p "${TARGET_DIR}"
          
          curl -sL "${DOWNLOAD_URL}" | tar -xz -C "${TARGET_DIR}" --strip-components=1
          ls -R "${TARGET_DIR}"

      - name: Install Feeds Again
        run: |
          ./scripts/feeds install -a
          
      - name: Configure Firmware Image
        run: |
          mv custom_repo/mx4300.config .config
          make defconfig V=s

      - name: Print .config
        run: |
          cat .config

      - name: Include Custom Files
        run: |
          cp -r custom_repo/${{ env.CUSTOM_FILES_PATH }} ./

      - name: Download Dependencies
        run: make -j$(($(nproc)+1)) V=sc download

      - name: Prepare Dependencies
        run: make -j$(($(nproc)+1)) V=sc prepare

      - name: Build Firmware
        run: make -j$(($(nproc)+1)) V=sc world

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@master
        with:
          name: ipq807x-images
          path: |
            bin/targets/qualcommax/ipq807x/

      - name: Copy .config File
        run: cp .config bin/targets/qualcommax/ipq807x/config.txt

      - name: Copy Directory Structure
        run: tree > bin/targets/qualcommax/ipq807x/file_list.txt
            
  release:
    name: Create a New Release
    needs: [build, check_commits]
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ipq807x-images
          path: firmware

      - name: Display File Structure
        run: ls -R firmware

      - name: Get Current Date
        run: echo "RELEASE_DATE=$(date +%F)" >> $GITHUB_ENV

      - name: Publish Release
        uses: softprops/action-gh-release@master
        with:
          files: firmware/*
          tag_name: ${{ env.RELEASE_DATE }}
          name: Updated Prebuilt Images ${{ env.RELEASE_DATE }}
          body: |
            Build Commit: ${{ needs.check_commits.outputs.latest_commit_sha }}
            NSS Packages Commit: ${{ needs.check_commits.outputs.nss_packages_repo_latest_commit_sha }}

      - name: Clean Up Old Releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          keep_latest: 2
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
