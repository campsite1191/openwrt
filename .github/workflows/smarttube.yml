# This is a basic GitHub Actions workflow to build a Gradle-based Android project.

name: Android CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # 1. Checks-out your primary repository. 
      # This is necessary to access your workflow file and any patch files you've stored here.
      - name: Checkout primary repository
        uses: actions/checkout@v4

      # 2. Checks-out the secondary repository you want to patch.
      # Replace 'owner/repo-to-patch' with the actual repository owner and name.
      # The 'path' property places it in a specific directory named 'source-repo'.
      - name: Checkout repository to patch
        uses: actions/checkout@v4
        with:
          repository: 'yuliskov/SmartTube' # <-- IMPORTANT: CHANGE THIS
          path: 'source-repo'

      # 3. Apply patches to the checked-out source code.
      # This assumes you have a directory named 'patches' in your primary repo
      # containing your .patch files.
      # - name: Apply patches
      #   run: |
      #     git apply --directory='source-repo' ./patches/your-first.patch
      #     git apply --directory='source-repo' ./patches/your-second.patch
        # Add more 'git apply' lines for each patch you have.

      # 4. Sets up the Java Development Kit (JDK) environment
      # Android builds often require a specific JDK version. Version 17 is common for modern Android development.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 5. Grant execute permission for gradlew in the patched repo
      # The Gradle wrapper script needs to be executable to run.
      - name: Make gradlew executable
        working-directory: ./source-repo # Run this command inside the patched repo's directory
        run: chmod +x ./gradlew

      # 6. Run the Gradle build in the patched repo
      # This command compiles the application and runs any unit tests.
      - name: Build with Gradle
        working-directory: ./source-repo # Run this command inside the patched repo's directory
        run: ./gradlew build

      # 7. (Optional) Upload build artifact from the patched repo
      # This step uploads the generated APK file from the build process.
      - name: Upload debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: source-repo/app/build/outputs/apk/debug/app-debug.apk

